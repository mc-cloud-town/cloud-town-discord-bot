from _typeshed import Incomplete
from io import BytesIO as IoBytesIO
from pathlib import Path
from typing import Any

class _MissingSentinel:
    def __eq__(self, other: Any) -> bool: ...
    def __bool__(self) -> bool: ...
    def __repr__(self) -> str: ...

MISSING: Any

def format_number(number: int) -> str: ...

class BytesIO(IoBytesIO):
    def __len__(self) -> int: ...
    @property
    def end(self) -> bool: ...
    @property
    def size(self) -> int: ...

class FileEncode:
    path: Incomplete
    data: Incomplete
    flag: Incomplete
    server_name: Incomplete
    def __init__(self, path: str | Path, data: bytes, *, flag: int = ..., server_name: str | None = ...) -> None: ...
    def encode(self) -> bytes: ...
    def __str__(self) -> str: ...
    __repr__ = __str__
    @classmethod
    def decode(cls, raw_data: bytes) -> FileEncode: ...
