from ..context import Context
from ..plugin import PluginMixin, SoloSetup
from ..utils import FormatMessage
from .config import UserData
from _typeshed import Incomplete
from aiohttp import web
from asyncio import AbstractEventLoop
from pathlib import Path
from typing import Any, Callable, Coroutine, List, Optional, TypeVar, Union

CoroFunc = Callable[..., Coroutine[Any, Any, Any]]
CoroFuncT = TypeVar('CoroFuncT', bound=CoroFunc)

class BaseServer(PluginMixin):
    loop: Incomplete
    extra_events: Incomplete
    clients: Incomplete
    sio_server: Incomplete
    app: Incomplete
    command_manager: Incomplete
    log: Incomplete
    console: Incomplete
    config: Incomplete
    plugins_dir: Incomplete
    def __init__(self, config_type: str = ..., loop: AbstractEventLoop | None = ...) -> None: ...
    def add_listener(self, func: CoroFunc, name: str = ...) -> None: ...
    def remove_listener(self, func: CoroFunc, name: str = ...) -> None: ...
    def listen(self, name: str = ...) -> Callable[[CoroFuncT], CoroFuncT]: ...
    def dispatch(self, event_name: str, *args: Any, **kwargs: Any) -> None: ...
    async def _run_event(self, coro: Callable[..., Coroutine[Any, Any, Any]], event_name: str, *args: Any, **kwargs: Any) -> None: ...
    def __get_args_len(self, coro: Callable[..., Any]) -> int: ...
    def _schedule_event(self, coro: Callable[..., Coroutine[Any, Any, Any]], event_name: str, *args: Any, **kwargs: Any): ...
    async def on_error(self, event_method: str, *args: Any, **kwargs: Any) -> None: ...
    async def on_connect(self, ctx: Context, auth): ...
    async def on_message(self, ctx: Context, msg: Any): ...
    async def on_disconnect(self, ctx: Context): ...
    async def on_cmd_callback(self, ctx: Context, result: str): ...
    def __handle_events(self) -> None: ...
    def create_context(self, sid: str, user: UserData, auth: dict = ...) -> Context: ...
    async def start(self) -> web.AppRunner: ...
    async def __on_shutdown(self, app: web.Application): ...
    def check_user(self, name: str, password: str) -> Optional[UserData]: ...
    def get_client(self, name: str) -> Optional[Context]: ...
    async def emit(self, event: str, *data: Optional[Any], to: Optional[str] = ..., room: Optional[str] = ..., skip_sid: Optional[Union[List[str], str]] = ..., namespace: Optional[str] = ..., callback: Optional[Callable[..., Any]] = ..., **kwargs: Any) -> None: ...
    async def send(self, msg: Union[str, FormatMessage, Any], server_name: str = ..., to: Optional[str] = ..., room: Optional[str] = ..., skip_sid: Optional[Union[List[str], str]] = ..., namespace: Optional[str] = ..., callback: Optional[Callable[..., Any]] = ..., format: Optional[bool] = ..., no_mark: bool = ..., **kwargs: Any): ...
    def load_extension(self, name: str | Path | SoloSetup) -> None: ...
    def unload_extension(self, name: str | Path | SoloSetup) -> None: ...
    def reload_extension(self, name: str | Path | SoloSetup) -> None: ...
