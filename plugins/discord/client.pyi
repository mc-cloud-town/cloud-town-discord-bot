import discord
from _typeshed import Incomplete
from asyncio import AbstractEventLoop
from discord import ApplicationContext as ApplicationContext, DiscordException as DiscordException, Message as Message, Reaction as Reaction, TextChannel as TextChannel, User as User
from discord.ext import commands
from discord.ext.commands import CommandError as CommandError, Context as Context
from logging import Logger
from server import Plugin
from server.core.server import BaseServer
from server.utils import FormatMessage
from server.utils.config import Config
from typing import Optional

class Bot(commands.Bot):
    __version__: str
    _uptime: Incomplete
    plugin: Incomplete
    log: Incomplete
    console: Incomplete
    config: Incomplete
    server: Incomplete
    def __init__(self, plugin: Plugin, loop: AbstractEventLoop | None = None) -> None: ...
    @property
    def chat_channel(self) -> int | None: ...
    async def get_or_fetch_channel(self, id: int) -> TextChannel | None: ...
    async def on_ready(self) -> None: ...
    async def on_command(self, ctx: Context): ...
    async def on_application_command(self, ctx: ApplicationContext): ...
    async def on_command_error(self, ctx: Context, error: CommandError): ...
    async def on_application_command_error(self, ctx: ApplicationContext, error: DiscordException): ...
    async def get_reference_message(self, msg: Message) -> Optional[Message]: ...
    def style_message(self, msg: Message) -> list[FormatMessage]: ...
    async def on_message(self, msg: Message): ...
    async def get_or_fetch_message(self, id: int, channel: TextChannel) -> Optional[Message]: ...

class BaseCog(discord.Cog):
    bot: Bot
    log: Logger
    plugin: Plugin
    config: Config
    server: BaseServer
    def __init__(self, bot: Bot) -> None: ...

class BotCommand(BaseCog):
    async def stats(self, ctx: ApplicationContext, *args): ...
    async def online(self, ctx: ApplicationContext): ...

def fix_msg(msg: str): ...
