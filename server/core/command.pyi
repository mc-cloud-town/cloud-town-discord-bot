from . import BaseServer
from _typeshed import Incomplete
from prompt_toolkit.completion import CompleteEvent, Completion, WordCompleter
from prompt_toolkit.document import Document
from typing import Any, Iterable, Optional, Union

class CommandCompleter(WordCompleter):
    command_manager: Incomplete
    def __init__(self, command_manager: CommandManager, **kwargs: Any) -> None: ...
    words: Incomplete
    display_dict: Incomplete
    def get_completions(self, document: Document, complete_event: CompleteEvent) -> Iterable[Completion]: ...

class CommandManager:
    server: Incomplete
    commands: Incomplete
    def __init__(self, server: BaseServer) -> None: ...
    def add_command(self, name: str, display: Optional[str] = ...) -> None: ...
    def add_commands(self, commands: Union[dict[str, Optional[str]], tuple[str]]) -> None: ...
    def remove_command(self, *names: str) -> None: ...
    def call_command(self, name: str) -> None: ...
    @property
    def words(self) -> list[str]: ...
    @property
    def display_dict(self) -> dict[str, Optional[str]]: ...
