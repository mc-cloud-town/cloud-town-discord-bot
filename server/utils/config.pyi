import json
import yaml
from _typeshed import Incomplete
from abc import ABC
from pathlib import Path
from typing import Any, ClassVar, Literal, Optional, TypeVar, Union

__all__ = ['Config']

_T = TypeVar('_T')

class Config(ABC):
    __config_filetype__: ClassVar[Union[Literal['json'], Literal['yaml']]]
    __config_path__: ClassVar[Union[str, Path]]
    __config_name__: ClassVar[str]
    _attrs: Incomplete
    __config_file_path__: Incomplete
    _kwargs: Incomplete
    def __init__(self, **kwargs: Any) -> None: ...
    def __init_subclass__(cls, type: Union[Literal['json'], Literal['yaml']] = 'yaml', path: Optional[Union[str, Path]] = None, name: Optional[str] = None) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, key: str) -> Any: ...
    def get(self, key: str, default: Optional[None] = None) -> Optional[_T]: ...
    def set(self, key: str, value: Any) -> None: ...
    def json(self) -> Union[list, dict]: ...
    def json_str(self) -> str: ...
    def yaml_str(self) -> str: ...
    @classmethod
    def load(cls, _filetype: Optional[Union[Literal['json'], Literal['yaml']]] = 'yaml', _config_path: Optional[Union[str, Path]] = None, _name: Optional[str] = None, _auto_create: bool = False, **kwargs: Any) -> Config: ...
    @classmethod
    def load_data(cls, path: Path | str, file_type: str) -> dict | None: ...
    def reload(self) -> None: ...
    def save(self, filetype: Optional[Union[Literal['json'], Literal['yaml']]] = None, config_path: Optional[Union[str, Path]] = None, name: Optional[str] = None) -> None: ...
