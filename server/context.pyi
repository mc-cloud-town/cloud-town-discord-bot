from . import BaseServer
from .core.config import UserData
from _typeshed import Incomplete
from typing import Any, Callable, List, Optional, Union

class Context:
    sid: Incomplete
    server: Incomplete
    log: Incomplete
    user: Incomplete
    auth: Incomplete
    _extra_command_wait: Incomplete
    rcon: Incomplete
    def __init__(self, server: BaseServer, sid: str, user: UserData, auth: dict = ...) -> None: ...
    async def _cmd_callback_callback(self, ctx: Context, result: dict) -> None: ...
    async def extra_command(self, command: str, *, timeout: float | None = ...) -> dict: ...
    async def emit(self, event: str, *data: Optional[Any], to: Optional[str] = ..., room: Optional[str] = ..., skip_sid: Optional[Union[List[str], str]] = ..., namespace: Optional[str] = ..., callback: Optional[Callable[..., Any]] = ..., **kwargs: Any) -> None: ...
    async def disconnect(self, *, sid: str = ..., namespace: Optional[str] = ..., ignore_queue: bool = ...) -> None: ...
    @property
    def display_name(self) -> str: ...
    async def execute_command(self, command: str, exc_timeout: bool = ...): ...
    @property
    def name(self) -> str: ...
    def __del__(self) -> None: ...
    def __le__(self, other: Any) -> bool: ...
    def __str__(self) -> str: ...
    __repr__ = __str__
